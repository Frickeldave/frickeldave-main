---
import type { LinkMapping } from "@/types";

interface Props {
  id: string;
  link?: LinkMapping;
  text?: string;
  className?: string;
  showProvider?: boolean;
}

const {
  id,
  link,
  text,
  className = "text-blue-600 dark:text-blue-400 hover:underline",
  showProvider = false,
} = Astro.props;

const displayText = text || link?.title || `Link zu ${id}`;
const providerInfo = showProvider && link ? ` (${link.provider})` : "";
const finalText = displayText + providerInfo;

// Add rel attributes for affiliate links
const relAttr = link?.affiliate ? "nofollow sponsored" : "nofollow";
---

<a 
  href="#"
  class={className} 
  rel={relAttr}
  onclick={`handleRedirectClick('${id}', window.location.href); return false;`}
  data-link-id={id}
>
  {finalText}
</a>

<script>
  import { handleLinkRedirect } from '../../lib/clientRedirectService';

  // Extend Window interface for type safety
  declare global {
    interface Window {
      handleRedirectClick: (id: string, referrer: string) => Promise<void>;
    }
  }

  // Make function globally available
  window.handleRedirectClick = async (id: string, referrer: string) => {
    await handleLinkRedirect(id, referrer);
  };
</script>
